import abc
from contextlib import AbstractContextManager

class Parent(AbstractContextManager, abc.ABC):
    @abc.abstractmethod
    def random_abstract(self):
        pass



class Child(Parent):
    def random_abstract(self):
        print('hoho')


test_child = Child()
test_child.random_abstract()


# Traceback (most recent call last):
#   File "/Users/nicole/PycharmProjects/pythonProject1/random.py", line 16, in <module>
#     test_child = Child()
# TypeError: Can't instantiate abstract class Child with abstract methods __exit__

